(define (SOS x y)
  (+ (sq x) (sq y)))
(define (sq x)
  (* x x))
Kinds of expressions:
* Numbers 
* Symbols
* combinations- this is the general case
* conditionals
Worry about these later:
* lambda expressions
* definitions

How do we evaluate combinations?
Substitution Rule
* Evaluate operator to get procedure
* Evaluate operands to get arguments
* Apply the procedure to the arguments
  * Copy the body of the procedure, subsitituting the arguments supplied for
    the formal parameters of the procedure
  * Evaluate the resulting new body.

(SOS 3 4)
(+ (sq 3) (sq 4))
(+ (sq 3) (* 4 4))
(+ (sq 3) 16)
(+ (* 3 3) 16)
(+ 9 16)
25
How do we evaluate conditionals?
* Evaluate the predicate expression
  * if it yields TRUE
    * evaluate the consequent expression
  * otherwise
    * evaluate the alternative expression
(IF <predicate>
    <consequent>
    <alternative>)

Imagine the first as having two piles of marbles. To get the sum we are moving
one pile to the other. Once one pile is empty the other pile is the sum
(define (+ x y)
  (if (= x 0)
      y
      (+ (-1+ x) (1+ y))))

Take from one pile into your hand, once pile is empty add one by one to second
pile
(define (+ x y)
  (if (= x 0)
      y
      (1+ (+ (-1+ x) y))))
(+ 2 4)
(1+ (+ (-1+ 2) 4))
(1+ (+ 1 4))
(1+ (1+ (+ (-1+ 1) 4)))
(1+ (1+ (+ 0 4)))
(1+ (1+ 4))
(1+ 5)
6
Evolve the processes on the board, get a feeling for the shapes:
(define (+ x y)
  (if (= x 0)
      y
      (+ (-1+ x) (1+ y))))
(+ 3 4)  |
(+ 2 5)  |
(+ 1 6)  |
(+ 0 7)  | time
7        
------ space
Time here is proportional to x. Space is constant.
time = O(x); space = O(1)
This is called an iteration. ANY machine can do this algorithm in constant space

(define (+ x y)
  (if (= x 0)
      y
      (1+ (+ (-1+ x) y))))
(+ 3 4)
(1+ (+ 2 4))
(1+ (1+ (+ 1 4)))
(1+ (1+ (1+ (+ 0 4))))
(1+ (1+ (1+ 4)))
(1+ (1+ 5))
(1+ 6)
7
This shape gets bigger and then shrinks back
time = O(x)
space = O(x)
This is called a linear recursion
There is nothing special about a recursive definition. These are both recursive
definitions but only one gives rise to a recursive PROCESS.
An iteration is a process that has all of its state in explicit variables.

Fibonacci
Start with two numbers 0 1
0 1 2 3 4 5 6 7  8  9  10
0 1 1 2 3 5 8 13 21 34 55 ...

Simplest program to produce the Fibonacci numbers
(define (fib n)
  (if (< n 2)
      n
      (+ (fib(- n 1))
         (fib(-n 2)))))
Makes a tree of fibonacci calls. time = O(fib(n)) The amount of space a tree
takes up is the longest path in the tree. space = O(n)

Famous game, the tower of hanoi
(define (move n from to spare)
  (cond ((= n 0) "done")
        (else
        (move (-1+ n) from spare to)
        (print-move from to)
        (move (-1+ n) spare to from))))
(move 4 1 2 3)
(move 3 1 3 2) ...
(move 2 1 2 3) ...
(move 1 1 3 2) ...
Can you write an iterative algorithm to do this?
